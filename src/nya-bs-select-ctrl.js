
nyaBsSelect.controller('nyaBsSelectCtrl', ['$scope', function($scope){

    var COLLECTION_PATTERN = /^\s*([^|]+)(?:\s+\|\s+[\s\S]+)?\s*$/;

    var self = this;

    // keyIdentifier and valueIdentifier are set by nyaBsOption directive
    // used by nyaBsSelect directive to retrieve key and value from each nyaBsOption's child scope.
    self.keyIdentifier = null;
    self.valueIdentifier = null;

    self.isMultiple = false;

    // watch the original collection to detect any change which not generated by its piped filter.
    // when collection changed we need to check our model.
    self.setCollectionExp = function(collectionExp) {
      var match = collectionExp.match(COLLECTION_PATTERN);
      if(!match || match.length < 2) {
        throw new Error('collection expression not valid');
      }
      var trueCollectionExp = match[1];

      $scope.$watchCollection(trueCollectionExp, function(collection) {
        var index,
          value,
          collectionLength,
          values = [];

        if(isArrayLike(collection)) {
          collectionLength = collection.length;
          for(index = 0; index < collectionLength; index++) {
            value = {};
            if(self.keyIdentifier) {
              value[self.keyIdentifier] = index;
            }
            value[self.valueIdentifier] = collection[index];
            values.push(value);
          }
        } else {
          // if object, extract keys, sort them and use to determine order of iteration over obj props
          for (var itemKey in collection) {
            if (collection.hasOwnProperty(itemKey) && itemKey.charAt(0) != '$') {
              value = {};
              if(self.keyIdentifier) {
                value[self.keyIdentifier] = itemKey;
              }
              value[self.valueIdentifier] = collection[itemKey];
              values.push(value);
            }
          }
          values.sort();
        }

        self.onCollectionChange(values);
      });

    };

    // Should be override by nyaBsSelect directive and called by nyaBsOption directive when collection is changed.
    self.onCollectionChange = function(){};

  }]);